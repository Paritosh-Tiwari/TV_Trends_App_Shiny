data[,3] = as.numeric(as.character((data[,3])))
data[,4] = as.numeric(as.character((data[,4])))
data[,5] = as.numeric(as.character((data[,5])))
table(data$Category)
decade = pbsapply(data[,5],function(x) {decade_tagging(x)})
data$decade = decade
dim(data)
##################################################################################
## Getting decade wise statistics
datamelt = melt(data,id=c("Category","Name","Year_Started","decade"),measure.vars=c("User_Rating","User_Votes"))
Decade_Statistics = dcast(datamelt,decade~variable,sum)
#       decade User_Rating User_Votes
# 1  1911-1920         0.0          0
# 2  1921-1930        55.4       5758
# 3  1931-1940         0.0          0
# 4  1941-1950       143.5       1484
# 5  1951-1960      1658.4      38509
# 6  1961-1970      1823.3      54565
# 7  1971-1980      2211.4      62805
# 8  1981-1990      3822.7     174575
# 9  1991-2000      9076.3     818898
# 10 2001-2010     32854.2    2422001
# 11 2011-2014      8622.8     185695
# Very less number of shows before 1950. So re-dividing the statistics to include
# 1911-1950 in one group
names(Decade_Statistics) = c("decade","Total_User_Ratings","Total_User_Votes")
###################################################################################
## Calculation Success Quotient
data_merge = merge(data,Decade_Statistics,by.x="decade",by.y="decade",all=TRUE)
head(data_merge)
data_merge$sq = (data_merge$User_Votes/data_merge$Total_User_Votes)*data_merge$User_Rating
q = quantile(data_merge$sq,probs=seq(0,1,0.20))
## Successful Show threshold
upper_t = q[5]
lower_t = q[4]
rating = pbsapply(data_merge[,9],function(x) {show_rating(x,upper_t,lower_t)})
data_merge$rating = rating
data_merge$count = 1
#####################################################################################
datamelt_n = melt(data_merge,id=c("decade","Category","Name","Year_Started","decade","rating"),measure.vars=c("User_Rating","User_Votes","Total_User_Ratings","Total_User_Votes","sq","count"))
t1 = dcast(datamelt_n,decade+rating~variable,sum)
t2 = dcast(datamelt_n,Category+rating~variable,sum)
t3 = dcast(datamelt_n,Category+decade+rating~variable,sum)
######################################################################################
library(rCharts)
n1 <- nPlot(count ~ decade, group = "rating", data = t1, type = "multiBarChart")
n2 <- nPlot(count ~ Category, group = "rating", data = t2, type = "multiBarChart")
n3 <- nPlot(count ~ decade, group = "rating", data = t3[t3$Category=="Comedy",], type = "multiBarChart")
n3
install.packages("C:/Users/Paritosh/Desktop/ramnathv-rCharts-2c368c8.zip", repos = NULL)
library(rCharts)
install.packages("C:/Users/Paritosh/Desktop/ramnathv-rCharts-2c368c8.zip", repos = NULL)
n3 <- nPlot(count ~ decade, group = "rating", data = t3[t3$Category=="Comedy",], type = "multiBarChart")
n3
n3 <- nPlot(count ~ decade, group = "rating", data = t3, type = "multiBarChart")
n3
sessionInfo()
require(devtools)
install_github('rCharts', 'ramnathv')
library(stringr)
library(plyr)
library(pbapply)
library(reshape2)
################################################################################
## Sourcing Data
show_data = read.csv("Data.csv",header=TRUE)
show_data[,1] = as.character(show_data[,1])
show_data[,2] = as.character(show_data[,2])
dim(show_data)
################################################################################
## Removing Missing Values
missing_values = pbapply(show_data,1,function(x){sum(is.na(x))})
show_data_n = show_data[which(missing_values==0),]
dim(show_data_n)
data_updated = show_data_n[show_data_n$Year_Started>1900,]
dim(data_updated)
################################################################################
## Assigning Decade
data = data_updated
data[,3] = as.numeric(as.character((data[,3])))
data[,4] = as.numeric(as.character((data[,4])))
data[,5] = as.numeric(as.character((data[,5])))
table(data$Category)
decade = pbsapply(data[,5],function(x) {decade_tagging(x)})
data$decade = decade
dim(data)
##################################################################################
## Getting decade wise statistics
datamelt = melt(data,id=c("Category","Name","Year_Started","decade"),measure.vars=c("User_Rating","User_Votes"))
Decade_Statistics = dcast(datamelt,decade~variable,sum)
#       decade User_Rating User_Votes
# 1  1911-1920         0.0          0
# 2  1921-1930        55.4       5758
# 3  1931-1940         0.0          0
# 4  1941-1950       143.5       1484
# 5  1951-1960      1658.4      38509
# 6  1961-1970      1823.3      54565
# 7  1971-1980      2211.4      62805
# 8  1981-1990      3822.7     174575
# 9  1991-2000      9076.3     818898
# 10 2001-2010     32854.2    2422001
# 11 2011-2014      8622.8     185695
# Very less number of shows before 1950. So re-dividing the statistics to include
# 1911-1950 in one group
names(Decade_Statistics) = c("decade","Total_User_Ratings","Total_User_Votes")
###################################################################################
## Calculation Success Quotient
data_merge = merge(data,Decade_Statistics,by.x="decade",by.y="decade",all=TRUE)
head(data_merge)
data_merge$sq = (data_merge$User_Votes/data_merge$Total_User_Votes)*data_merge$User_Rating
q = quantile(data_merge$sq,probs=seq(0,1,0.20))
## Successful Show threshold
upper_t = q[5]
lower_t = q[4]
rating = pbsapply(data_merge[,9],function(x) {show_rating(x,upper_t,lower_t)})
data_merge$rating = rating
data_merge$count = 1
#####################################################################################
datamelt_n = melt(data_merge,id=c("decade","Category","Name","Year_Started","decade","rating"),measure.vars=c("User_Rating","User_Votes","Total_User_Ratings","Total_User_Votes","sq","count"))
t1 = dcast(datamelt_n,decade+rating~variable,sum)
t2 = dcast(datamelt_n,Category+rating~variable,sum)
t3 = dcast(datamelt_n,Category+decade+rating~variable,sum)
######################################################################################
library(rCharts)
n1 <- nPlot(count ~ decade, group = "rating", data = t1, type = "multiBarChart")
n2 <- nPlot(count ~ Category, group = "rating", data = t2, type = "multiBarChart")
n3 <- nPlot(count ~ decade, group = "rating", data = t3, type = "multiBarChart")
n3
library(relenium)
library(XML)
base_url = "http://www.shabux.com"
firefox <- firefoxClass$new()
firefox$get("http://www.shabux.com/?x=login")
username <- firefox$findElementByXPath("//*[@id='zx-user']")
username$sendKeys("satoshimines")
password <- firefox$findElementByXPath("//*[@id='zx-pass-pri']")
password$sendKeys("Cranberry!juice_2014")
page_source = firefox$getPageSource()
page = htmlTreeParse(page_source,useInternal=TRUE)
ad_links = xpathSApply(page,"//*[@id='zx-ptcview']/div/div/div/div/div/a/@href")
ad_links = as.character(ad_links)
for(i in ad_links)
{ad_link_actual = paste(base_url,i,sep="")
firefox$get(ad_link_actual)
Sys.sleep(30 + abs(rnorm(5,2)))
}
ad_links = ad_links[1:21]
ad_links
for(i in ad_links)
{ad_link_actual = paste(base_url,i,sep="")
firefox$get(ad_link_actual)
Sys.sleep(30 + abs(rnorm(5,2)))
}
firefox$close()
library(relenium)
library(XML)
library(stringr)
base_url = "http://click2dad.net"
firefox <- firefoxClass$new()
firefox$get("http://click2dad.net/#login_tab")
username <- firefox$findElementByXPath("//div[@id='login_tab']//noindex/input[1]")
username$sendKeys("paritoshtiwari@gmail.com")
password <- firefox$findElementByXPath("//div[@id='login_tab']//noindex/input[2]")
password$sendKeys("yZFoHypY0M")
login_click <- firefox$findElementByXPath("//*[@id='form_login']/div/noindex/button")
login_click$click()
ad_page_click <- firefox$findElementByXPath("//li[@class='first']/a")
ad_page_click$click()
page_source = firefox$getPageSource()
p = htmlTreeParse(page_source,useInternal=TRUE)
ad_page_links = xpathSApply(p,"//tbody/tr/td[2]/a/@href")
ad_page_links = paste(base_url,ad_page_links,sep="")
ad_page_duration = xpathSApply(p,"//tbody/tr/td[3]",xmlValue)
ad_page_duration = str_split(ad_page_duration," ")
duration = sapply(ad_page_duration, function(x) {x[1]})
duration = as.numeric(duration)
table = cbind(ad_page_links,duration)
table[,2] = as.numeric(table[,2])
for(i in seq_along(1:dim(table)[1]))
{ firefox$get(table[i,1])
Sys.sleep(as.numeric(table[i,2])+10)
}
source('D:/Analytics/Developing Data Products/TV Data/Functions.R')
library(stringr)
library(plyr)
library(pbapply)
library(reshape2)
library(rCharts)
################################################################################
## Sourcing Data
show_data = read.csv("Data.csv",header=TRUE)
show_data[,1] = as.character(show_data[,1])
show_data[,2] = as.character(show_data[,2])
dim(show_data)
################################################################################
## Removing Missing Values
missing_values = pbapply(show_data,1,function(x){sum(is.na(x))})
show_data_n = show_data[which(missing_values==0),]
dim(show_data_n)
data_updated = show_data_n[show_data_n$Year_Started>1900,]
dim(data_updated)
################################################################################
## Assigning Decade
data = data_updated
data[,3] = as.numeric(as.character((data[,3])))
data[,4] = as.numeric(as.character((data[,4])))
data[,5] = as.numeric(as.character((data[,5])))
table(data$Category)
decade = pbsapply(data[,5],function(x) {decade_tagging(x)})
data$decade = decade
dim(data)
##################################################################################
## Getting decade wise statistics
datamelt = melt(data,id=c("Category","Name","Year_Started","decade"),measure.vars=c("User_Rating","User_Votes"))
Decade_Statistics = dcast(datamelt,decade~variable,sum)
#       decade User_Rating User_Votes
# 1  1911-1920         0.0          0
# 2  1921-1930        55.4       5758
# 3  1931-1940         0.0          0
# 4  1941-1950       143.5       1484
# 5  1951-1960      1658.4      38509
# 6  1961-1970      1823.3      54565
# 7  1971-1980      2211.4      62805
# 8  1981-1990      3822.7     174575
# 9  1991-2000      9076.3     818898
# 10 2001-2010     32854.2    2422001
# 11 2011-2014      8622.8     185695
# Very less number of shows before 1950. So re-dividing the statistics to include
# 1911-1950 in one group
names(Decade_Statistics) = c("decade","Total_User_Ratings","Total_User_Votes")
###################################################################################
## Calculation Success Quotient
data_merge = merge(data,Decade_Statistics,by.x="decade",by.y="decade",all=TRUE)
head(data_merge)
data_merge$sq = (data_merge$User_Votes/data_merge$Total_User_Votes)*data_merge$User_Rating
q = quantile(data_merge$sq,probs=seq(0,1,0.20))
## Successful Show threshold
upper_t = q[5]
rating = pbsapply(data_merge[,9],function(x) {show_rating(x,upper_t)})
data_merge$rating = rating
data_merge$count = 1
#####################################################################################
datamelt_n = melt(data_merge,id=c("decade","Category","Name","Year_Started","decade","rating"),measure.vars=c("User_Rating","User_Votes","Total_User_Ratings","Total_User_Votes","sq","count"))
t1 = dcast(datamelt_n,decade+rating~variable,sum)
t2 = dcast(datamelt_n,Category+rating~variable,sum)
t3 = dcast(datamelt_n,Category+decade+rating~variable,sum)
######################################################################################
n1 <- nPlot(count ~ decade, group = "rating", data = t1, type = "multiBarChart")
n2 <- nPlot(count ~ Category, group = "rating", data = t2, type = "multiBarChart")
n3 <- nPlot(count ~ decade, group = "rating", data = t3[t3$Category=="Comedy",], type = "multiBarChart")
n3$chart(color = c('blue', 'green'))
n3 <- nPlot(count ~ decade, group = "rating", data = t3[t3$Category=="Comedy",], type = "multiBarChart")
n3$chart(color = c('blue', 'green'))
n3$xAxis(categories=t3$decade)
n3
n3 <- nPlot(count ~ decade, group = "rating", data = t3[t3$Category=="Comedy",], type = "multiBarChart")
n3$chart(color = c('blue', 'green'))
#n3$xAxis(categories=t3$decade)
n3
n3 <- nPlot(count ~ decade, group = "rating", data = t3[t3$Category=="Comedy",], type = "multiBarChart")
n3$chart(color = c('blue', 'green'))
#n3$xAxis(categories=t3$decade)
n3$chart(reduceXTicks = FALSE)
n3$xAxis(staggerLabels = TRUE)
n3
n3 <- nPlot(count ~ decade, group = "rating", data = t3[t3$Category=="Comedy",], type = "multiBarChart")
n3$chart(color = c('blue', 'green'))
n3$chart(reduceXTicks = FALSE)
n3$xAxis(staggerLabels = TRUE)
n3
n3 <- nPlot(count ~ decade, group = "rating", data = t3[t3$Category=="Comedy",], type = "multiBarChart")
n3$chart(color = c('blue', 'green'))
n3$chart(reduceXTicks = FALSE)
n3
n1 <- nPlot(count ~ decade, group = "rating", data = t1, type = "multiBarChart")
n1
n2
n2$chart(reduceXTicks = FALSE)
n2
t2
n2 <- nPlot(count ~ Category, group = "rating", data = t2[1:10,], type = "multiBarChart")
n2
dim(t2)
t4 = t2[1:10,]
t4
n4 <- nPlot(count ~ Category, group = "rating", data = t4, type = "multiBarChart")
n4$chart(reduceXTicks = FALSE)
n4
t4 = t2[1:20,]
n4 <- nPlot(count ~ Category, group = "rating", data = t4, type = "multiBarChart")
n4$chart(reduceXTicks = FALSE)
n4
n4 <- nPlot(count ~ Category, group = "rating", data = t4, type = "multiBarChart")
n4$chart(reduceXTicks = FALSE)
n4$xAxis(rotateLabels=-90)
n4
n4$params()
n4$params
n4$params(width = 2000,height=600)
n4$.->params(width = 2000,height=600)
n4 <- nPlot(count ~ Category, group = "rating", data = t4, type = "multiBarChart")
n4$chart(reduceXTicks = FALSE)
n4$xAxis(rotateLabels=-45)
n4
n4 <- nPlot(count ~ Category, group = "rating", data = t4, type = "multiBarChart")
n4$chart(reduceXTicks = FALSE)
n4$xAxis(rotateLabels=-30)
n4
n4 <- nPlot(count ~ Category, group = "rating", data = t4, type = "multiBarChart")
n4$chart(reduceXTicks = FALSE)
n4$xAxis(rotateLabels=-30)
n4$set(width = 1000, height = 600)
n4
n4 <- nPlot(count ~ Category, group = "rating", data = t4, type = "multiBarChart")
n4$chart(reduceXTicks = FALSE)
n4$xAxis(rotateLabels=-30)
n4$set(width = 500, height = 300)
n4
n4 <- nPlot(count ~ Category, group = "rating", data = t4, type = "multiBarChart")
n4$chart(reduceXTicks = FALSE)
n4$xAxis(rotateLabels=-30)
#n4$set(width = 500, height = 300)
n4
n4 <- nPlot(count ~ Category, group = "rating", data = t4, type = "multiBarChart")
n4$chart(reduceXTicks = FALSE)
n4$xAxis(rotateLabels=-15)
#n4$set(width = 500, height = 300)
n4
write.csv(data_merge,"TV_Show_Tidy_Data.csv",row.names=FALSE)
library(stringr)
library(plyr)
library(pbapply)
library(reshape2)
library(rCharts)
################################################################################
## Sourcing Data
show_data = read.csv("Data.csv",header=TRUE)
show_data[,1] = as.character(show_data[,1])
show_data[,2] = as.character(show_data[,2])
show_data[,6] = as.character(show_data[,6])
dim(show_data)
missing_values = pbapply(show_data,1,function(x){sum(is.na(x))})
show_data_n = show_data[which(missing_values==0),]
dim(show_data_n)
data_updated = show_data_n[show_data_n$Year_Started>1900,]
dim(data_updated)
data = data_updated
data[,3] = as.numeric(as.character((data[,3])))
data[,4] = as.numeric(as.character((data[,4])))
data[,5] = as.numeric(as.character((data[,5])))
table(data$Category)
Period = pbsapply(data[,5],function(x) {decade_tagging(x)})
data$Period = Period
dim(data)
datamelt = melt(data,id=c("Category","Name","Year_Started","Period"),measure.vars=c("User_Rating","User_Votes"))
Decade_Statistics = dcast(datamelt,decade~variable,sum)
Decade_Statistics = dcast(datamelt,Period~variable,sum)
names(Decade_Statistics) = c("Period","Total_User_Ratings","Total_User_Votes")
data_merge = merge(data,Decade_Statistics,by.x="Period",by.y="Period",all=TRUE)
head(data_merge)
data_merge$sq = (data_merge$User_Votes/data_merge$Total_User_Votes)*data_merge$User_Rating
q = quantile(data_merge$sq,probs=seq(0,1,0.20))
q
q[5]
upper_t = q[5]
Rating = pbsapply(data_merge[,9],function(x) {show_rating(x,upper_t)})
data_merge$Rating = Rating
data_merge$count = 1
head(data_merge)
write.csv(data_merge[,c(1,2,3,4,5,6,7,10,11)],"TV_Show_Tidy_Data.csv",row.names=FALSE)
source('D:/Analytics/Developing Data Products/TV Data/Functions.R')
data_merge = merge(data,Decade_Statistics,by.x="Period",by.y="Period",all=TRUE)
head(data_merge)
data_merge$sq = (data_merge$User_Votes/data_merge$Total_User_Votes)*data_merge$User_Rating*100
q = quantile(data_merge$sq,probs=seq(0,1,0.20))
q
upper_t = q[5]
upper_t
head(data_merge)
Rating = pbsapply(data_merge[,10],function(x) {show_rating(x,upper_t)})
data_merge$Rating = Rating
data_merge$count = 1
head(data_merge)
write.csv(data_merge[,c(1,2,3,4,5,6,7,10,11)],"TV_Show_Tidy_Data.csv",row.names=FALSE)
source('D:/Analytics/Developing Data Products/TV Data/Functions.R')
source('D:/Analytics/Developing Data Products/TV Data/Functions.R')
data_merge = merge(data,Decade_Statistics,by.x="Period",by.y="Period",all=TRUE)
head(data_merge)
data_merge$sq = (data_merge$User_Votes/data_merge$Total_User_Votes)*data_merge$User_Rating*100
q = quantile(data_merge$sq,probs=seq(0,1,0.20))
## Successful Show threshold
upper_t = q[5]
Rating = pbsapply(data_merge[,10],function(x) {show_rating(x,upper_t)})
data_merge$Rating = Rating
data_merge$count = 1
head(data_merge)
#####################################################################################
write.csv(data_merge[,c(1,2,3,4,5,6,7,10,11)],"TV_Show_Tidy_Data.csv",row.names=FALSE)
source('D:/Analytics/Developing Data Products/TV Data/Functions.R')
library(stringr)
library(plyr)
library(pbapply)
library(reshape2)
library(rCharts)
################################################################################
## Sourcing Data
show_data = read.csv("Data.csv",header=TRUE)
show_data[,1] = as.character(show_data[,1])
show_data[,2] = as.character(show_data[,2])
show_data[,6] = as.character(show_data[,6])
dim(show_data)
################################################################################
## Removing Missing Values
missing_values = pbapply(show_data,1,function(x){sum(is.na(x))})
show_data_n = show_data[which(missing_values==0),]
dim(show_data_n)
data_updated = show_data_n[show_data_n$Year_Started>1900,]
dim(data_updated)
################################################################################
## Assigning Period
data = data_updated
data[,3] = as.numeric(as.character((data[,3])))
data[,4] = as.numeric(as.character((data[,4])))
data[,5] = as.numeric(as.character((data[,5])))
table(data$Category)
Period = pbsapply(data[,5],function(x) {decade_tagging(x)})
data$Period = Period
dim(data)
##################################################################################
## Getting decade wise statistics
datamelt = melt(data,id=c("Category","Name","Year_Started","Period"),measure.vars=c("User_Rating","User_Votes"))
Decade_Statistics = dcast(datamelt,Period~variable,sum)
#       Period User_Rating User_Votes
# 1  1911-1920         0.0          0
# 2  1921-1930        55.4       5758
# 3  1931-1940         0.0          0
# 4  1941-1950       143.5       1484
# 5  1951-1960      1658.4      38509
# 6  1961-1970      1823.3      54565
# 7  1971-1980      2211.4      62805
# 8  1981-1990      3822.7     174575
# 9  1991-2000      9076.3     818898
# 10 2001-2010     32854.2    2422001
# 11 2011-2014      8622.8     185695
# Very less number of shows before 1950. So re-dividing the statistics to include
# 1911-1950 in one group
names(Decade_Statistics) = c("Period","Total_User_Ratings","Total_User_Votes")
###################################################################################
## Calculation Success Quotient
data_merge = merge(data,Decade_Statistics,by.x="Period",by.y="Period",all=TRUE)
head(data_merge)
data_merge$sq = (data_merge$User_Votes/data_merge$Total_User_Votes)*data_merge$User_Rating*100
q = quantile(data_merge$sq,probs=seq(0,1,0.20))
## Successful Show threshold
upper_t = q[5]
Rating = pbsapply(data_merge[,10],function(x) {show_rating(x,upper_t)})
data_merge$Rating = Rating
data_merge$count = 1
head(data_merge)
#####################################################################################
write.csv(data_merge[,c(1,2,3,4,5,6,7,10,11)],"TV_Show_Tidy_Data.csv",row.names=FALSE)
## Sourcing Data
show_data = read.csv("Data.csv",header=TRUE)
show_data[,1] = as.character(show_data[,1])
show_data[,2] = as.character(show_data[,2])
show_data[,6] = as.character(show_data[,6])
dim(show_data)
missing_values = pbapply(show_data,1,function(x){sum(is.na(x))})
show_data_n = show_data[which(missing_values==0),]
dim(show_data_n)
data_updated = show_data_n[show_data_n$Year_Started>1900,]
dim(data_updated)
data = data_updated
data[,3] = as.numeric(as.character((data[,3])))
data[,4] = as.numeric(as.character((data[,4])))
head(data)
data[,5] = as.numeric(as.character((data[,5])))
show_data = read.csv("Data.csv",header=TRUE)
show_data[,1] = as.character(show_data[,1])
show_data[,2] = as.character(show_data[,2])
show_data[,6] = as.character(show_data[,6])
dim(show_data)
################################################################################
## Removing Missing Values
missing_values = pbapply(show_data,1,function(x){sum(is.na(x))})
show_data_n = show_data[which(missing_values==0),]
dim(show_data_n)
data_updated = show_data_n[show_data_n$Year_Started>1900,]
dim(data_updated)
################################################################################
## Assigning Period
data = data_updated
data[,3] = as.numeric(as.character((data[,3])))
data[,4] = as.numeric(as.character((data[,4])))
data[,5] = as.numeric(as.character((data[,5])))
table(data$Category)
Period = pbsapply(data[,5],function(x) {decade_tagging(x)})
data$Period = Period
dim(data)
datamelt = melt(data,id=c("Category","Name","Year_Started","Period"),measure.vars=c("User_Rating","User_Votes"))
Decade_Statistics = dcast(datamelt,Period~variable,sum)
names(Decade_Statistics) = c("Period","Total_User_Ratings","Total_User_Votes")
data_merge = merge(data,Decade_Statistics,by.x="Period",by.y="Period",all=TRUE)
head(data_merge)
data_merge$sq = (data_merge$User_Votes/data_merge$Total_User_Votes)*data_merge$User_Rating*100
q = quantile(data_merge$sq,probs=seq(0,1,0.20))
upper_t = q[5]
Rating = pbsapply(data_merge[,10],function(x) {show_rating(x,upper_t)})
data_merge$Rating = Rating
data_merge$count = 1
head(data_merge)
write.csv(data_merge[,c(1,2,3,4,5,6,7,10,11)],"TV_Show_Tidy_Data.csv",row.names=FALSE)
