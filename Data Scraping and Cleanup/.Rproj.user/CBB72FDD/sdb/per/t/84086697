{
    "contents" : "library(XML)\nlibrary(stringr)\nlibrary(plyr)\nlibrary(pbapply)\nlibrary(RCurl)\nlibrary(relenium)\n\n\n#############################################################################################\nbase_url = \"http://www.tv.com\"\nhome_url = \"http://www.tv.com/shows/\"\n\nhome_page = htmlTreeParse(home_url,useInternal=TRUE)\n\ncategories = xpathSApply(home_page,\"//*[@id='the_hub_page']/div/div/div/div[1]/a\",xmlValue)\ncategories = categories[2:length(categories)]\n\ncategories_url = xpathSApply(home_page,\"//*[@id='the_hub_page']/div/div/div/div[1]/a/@href\")\ncategories_url = categories_url[2:length(categories_url)]\ncategories_url = as.character(categories_url)\ncategories_url = paste(base_url,categories_url,sep=\"\")\n\nshow_list = data.frame()\nif(file.exists(\"show_list.csv\")) {show_list = read.csv(\"show_list.csv\",header=TRUE)}\n#show_list = shows_url(category_url,show_list)\n# show_list = pblapply(categories_url[1:2],function(x) {shows_url(x,show_list)})\n\n## 1594 pages\n#show_list = shows_url(home_url,show_list)\n\nfor(i in l)\n        {page_url = paste(home_url,\"page\",i,\"/\",sep=\"\")\n         show_list = shows_url(page_url,show_list)\n        \n        }\n\n##################################################################################\nshow_list = read.csv(\"show_list.csv\",header=TRUE)\nshow_data = data.frame()\nshow_url = as.character(show_list[1432:dim(show_list)[1],2])\nshow_data = ldply(show_url, function(x) {show_data_extract(x,show_data)})\nwrite.csv(show_data,\"data.csv\",row.names=FALSE)\nshow_data = data.frame()\n\n##################################################################################\nshow_list = read.csv(\"show_list.csv\",header=TRUE)\nshow_data = read.csv(\"Data.csv\",header=TRUE)\nshow_data[,1] = as.character(show_data[,1])\nshow_data[,2] = as.character(show_data[,2])\nshow_url = as.character(show_list[,2])\nn = 17470\nshow_url = show_url[n:dim(show_list)[1]]\n\nfor(i in show_url)\n        {print(i)\n         show_page = htmlTreeParse(i,useInternal=TRUE)\n         categories = xpathSApply(show_page,\"//div[@class='m categories _standard_sub_module']/p/a\",xmlValue)\n         \n         show_name = xpathSApply(show_page,\"//div[@class='m show_head']/h1\",xmlValue)\n         user_rating = xpathSApply(show_page,\"//div[@itemprop='ratingValue']\",xmlValue)\n         user_votes = xpathSApply(show_page,\"//div[@class='votes']/span\",xmlValue)\n         user_votes = gsub(\",\",\"\",user_votes)\n         user_votes = as.numeric(user_votes)\n         r1 = xpathSApply(show_page,\"//*[@id='mantle_skin']/div[3]/div/div/div[1]/div[2]\",xmlValue)\n         r2 = xpathSApply(show_page,\"//div[@class='tagline']/span/span\",xmlValue)\n         r3 = xpathSApply(show_page,\"//div[@class='tagline']/span/span/span\",xmlValue)\n         if(is.null(r2))\n         {year_end = unlist(str_split(r1,\" \"))\n          year_end = year_end[length(year_end)]\n          year_end = gsub(\")\",\"\",year_end)\n          last_season = xpathSApply(show_page,\"//td[@class='nums']/a\",xmlValue)\n          last_season = last_season[1]\n          last_season = str_trim(last_season)\n          last_season = unlist(str_split(last_season,\" \"))\n          v_options = grep(\"[0-9]\",last_season)\n          last_season = last_season[v_options[1]]\n          last_season = unlist(str_split(last_season,\":\"))\n          v_options = grep(\"[0-9]\",last_season)\n          last_season = last_season[v_options[1]]\n          last_season = str_trim(last_season)\n          Year_Started = as.numeric(year_end) - as.numeric(last_season)\n         }\n         if(!is.null(r2))\n         {Year_Started = gsub(r3,\"\",r2)\n          Year_Started = str_trim(Year_Started)\n          Year_Started = unlist(str_split(Year_Started,\" \"))\n          Year_Started = Year_Started[length(Year_Started)]  \n         }\n         \n         if(length(show_name)==0) show_name = \"NA\"\n         if(length(user_rating)==0) user_rating = \"NA\"\n         if(length(user_votes)==0) user_votes = \"NA\"\n         if(length(Year_Started)==0) Year_Started = \"NA\"\n         if(length(categories)==0) categories = \"NA\"\n         \n         for(category in categories)\n                {show_data[dim(show_data)[1]+1,1] = category\n                 show_data[dim(show_data)[1],2] = show_name\n                 show_data[dim(show_data)[1],3] = user_rating\n                 show_data[dim(show_data)[1],4] = user_votes\n                 show_data[dim(show_data)[1],5] = Year_Started\n                 show_data[dim(show_data)[1],6] = i\n                }\n         \n         names(show_data) = c(\"Category\",\"Name\",\"User_Rating\",\"User_Votes\",\"Year_Started\",\"Show_url\")\n         write.csv(show_data,\"Data.csv\",row.names=FALSE)\n         print (n)\n         n = n+1\n         Sys.sleep(abs(rnorm(2,0.5)))\n        }",
    "created" : 1406313371904.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3321321984",
    "id" : "84086697",
    "lastKnownWriteTime" : 1405754913,
    "path" : "D:/Analytics/Developing Data Products/Git_Repo/Data Scraping and Cleanup/TV_Scrape.R",
    "project_path" : "TV_Scrape.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}